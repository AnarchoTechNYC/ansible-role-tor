---
# Main task list. These ensure Tor is installed, running, and current.

- name: Build Tor.
  include_tasks: "build-{{ ansible_os_family | lower }}.yml"
  tags:
    - tor-build

- name: Create system Onion services directory.
  file:
    path: "{{ tor_onion_services_dir }}"
    state: directory
    owner: debian-tor

- name: Ensure torrc.d Onion service directories exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: debian-tor
  loop: "{{ dirs }}"
  vars:
    dirs:
      - /etc/tor/torrc.d/onions-available
      - /etc/tor/torrc.d/onions-enabled

- name: Include onions-enabled directory in torrc configuration.
  lineinfile:
    path: /etc/tor/torrc
    state: present
    insertafter: EOF
    regexp: '^%include /etc/tor/torrc\.d/onions-enabled$'
    line: "%include /etc/tor/torrc.d/onions-enabled"
    validate: "tor --verify-config -f %s"
  notify:
    - Reload Tor.

- name: Make Onion service configuration available.
  when: item.state | default('present') == "present"
  template:
    src: onion-service.j2
    dest: "/etc/tor/torrc.d/onions-available/{{ item.name }}"
    owner: debian-tor
    group: debian-tor
    mode: "600"
    # TODO: Fix unprivileged-to-unprivileged user validation. See:
    # http://docs.ansible.com/ansible/latest/become.html#becoming-an-unprivileged-user
    #validate: "tor --verify-config -f %s"
  loop: "{{ onion_services }}"

- name: Ensure Onion service directory exists.
  when: item.state | default('present') == "present" and
        (item.private_key_file is defined or item.client_keys_file is defined)
  file:
    path: "{{ tor_onion_services_dir }}/{{ item.name }}"
    state: directory
    owner: debian-tor
    group: debian-tor
    mode: "700"
  loop: "{{ onion_services }}"

- name: Supply Onion service private key.
  when: item.state | default('present') == "present" and item.private_key_file is defined
  copy:
    src: "{{ item.private_key_file }}"
    dest: "{{ tor_onion_services_dir }}/{{ item.name }}/private_key"
    owner: debian-tor
    group: debian-tor
    mode: "600"
  loop: "{{ onion_services }}"

- name: Supply Onion service client keys.
  when: item.state | default('present') == "present" and
        item.client_keys_file is defined and
        (item.auth_type is defined and item.auth_type)
  copy:
    src: "{{ item.client_keys_file }}"
    dest: "{{ tor_onion_services_dir }}/{{ item.name }}/client_keys"
    owner: debian-tor
    group: debian-tor
    mode: "600"
  loop: "{{ onion_services }}"

- name: Remove Onion service configuration.
  when: item.0.state | default('present') == "absent"
  file:
    path: "{{ item.1 }}/{{ item.0.name }}"
    state: absent
  loop: "{{ onion_services | product(paths) | list }}"
  vars:
    paths:
      - /etc/tor/torrc.d/onions-available
      - "{{ tor_data_dir }}/onion-services"

- name: Enable Onion service.
  when: item.state | default('present') != "absent"
  file:
    src: "/etc/tor/torrc.d/onions-available/{{ item.name }}"
    path: "/etc/tor/torrc.d/onions-enabled/{{ item.name }}"
    state: "{{ item.enabled | default('link') }}"
  loop: "{{ onion_services }}"
  notify: Reload Tor.

- name: Enable Tor service.
  service:
    name: tor
    state: started
    enabled: yes

# We do this immediately rather than as a handler in order to ensure
# that we will have generated Onion service keys to backup, next.
- name: Apply Tor configuration.
  service:
    name: tor
    state: reloaded

- name: Backup Onion service secrets.
  when: tor_onion_services_backup_dir is defined
  include_tasks: backup-local.yml
  tags:
    - tor-backup
