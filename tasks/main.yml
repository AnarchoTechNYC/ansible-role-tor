---
# Main task list. These ensure Tor is installed, running, and current.

- name: Build Tor.
  include_tasks: "build-{{ ansible_os_family | default('Debian') | lower }}.yml"
  tags:
    - tor-build

- name: Harden Tor with Vanguards.
  when: tor_onion_services_vanguards is defined
  include_tasks: harden-vanguards.yml

- name: Ensure torrc.d Onion service directories exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: debian-tor
    group: debian-tor
    mode: "700"
  loop:
    - /etc/tor/torrc.d/onions-available
    - /etc/tor/torrc.d/onions-enabled

- name: Supply Onion service client credentials.
  when: onion_services_client_credentials is defined
  template:
    src: HidServAuth.j2
    dest: "/etc/tor/torrc.d/client-auth"
    owner: debian-tor
    group: debian-tor
    mode: "600"
    validate: "tor --verify-config -f %s"

- name: Write main Tor configuration file.
  template:
    src: torrc.j2
    dest: /etc/tor/torrc
    owner: debian-tor
    group: debian-tor
    mode: "600"
    # TODO: Failed validation...why?
    #validate: "tor --verify-config -f %s"

- name: Make Onion service configuration available.
  when: onion_services is defined and
        item.state | default('present') == "present"
  template:
    src: onion-service.j2
    dest: "/etc/tor/torrc.d/onions-available/{{ item.name }}"
    owner: debian-tor
    group: debian-tor
    mode: "600"
    # TODO: Fix unprivileged-to-unprivileged user validation. See:
    # http://docs.ansible.com/ansible/latest/become.html#becoming-an-unprivileged-user
    #validate: "tor --verify-config -f %s"
  loop: "{{ onion_services }}"

- name: Ensure Onion service directory exists.
  when: onion_services is defined and
        item.state | default('present') == "present"
  file:
    path: "{{ tor_onion_services_dir }}/{{ item.name }}"
    state: directory
    owner: debian-tor
    group: debian-tor
    mode: "700"
  loop: "{{ onion_services }}"

- name: Supply Onion service private key.
  when: onion_services is defined and
        item.state | default('present') == "present" and
        item.private_key_file is defined
  include_tasks: "supply-onion-secrets.yml"
  loop: "{{ onion_services }}"
  vars:
    secret_file: private_key

- name: Supply Onion service client keys.
  when: onion_services is defined and
        item.state | default('present') == "present" and
        item.client_keys_file is defined and
        (item.auth_type is defined and item.auth_type)
  include_tasks: "supply-onion-secrets.yml"
  loop: "{{ onion_services }}"
  vars:
    secret_file: client_keys

- name: Remove Onion service configuration.
  when: onion_services is defined and
        item.0.state | default('present') == "absent"
  file:
    path: "{{ item.1 }}/{{ item.0.name }}"
    state: absent
  loop: "{{ onion_services | product(paths) | list }}"
  vars:
    paths:
      - /etc/tor/torrc.d/onions-enabled
      - /etc/tor/torrc.d/onions-available
      - "{{ tor_onion_services_dir }}"

- name: Enable Onion service.
  when: onion_services is defined and
        item.state | default('present') != "absent"
  file:
    src: "/etc/tor/torrc.d/onions-available/{{ item.name }}"
    path: "/etc/tor/torrc.d/onions-enabled/{{ item.name }}"
    state: "{{ item.enabled | default('link') }}"
  loop: "{{ onion_services }}"
  notify: Reload Tor.

- name: Enable new Tor config.
  service:
    name: tor
    state: reloaded
    enabled: yes
  changed_when: false

- name: Perform Vanguards setup.
  when: tor_onion_services_vanguards is defined
  block:
    - name: Write Vanguards configuration file.
      when: tor_onion_services_vanguards.config is defined
      template:
        src: "vanguards.conf.j2"
        dest: /etc/tor/vanguards.conf
        mode: "600"

    - name: Create Vanguards run directory.
      file:
        path: /var/run/vanguards
        state: directory
        mode: "700"

    - name: Write Vanguards runtime arguments.
      template:
        src: "vanguards.py-cmdline.j2"
        dest: /var/run/vanguards/cmdline
        mode: "600"

    - name: Run Vanguards as daemon script.
      shell: |
        nohup /usr/local/bin/vanguards/src/vanguards.py $(cat /var/run/vanguards/cmdline) </dev/null >/dev/null &
        echo $! > /var/run/vanguards/vanguards.pid
      args:
        chdir: /var/run/vanguards
        creates: "/var/run/vanguards/vanguards.pid"

- name: Backup Onion service secrets.
  when: tor_onion_services_backup_dir is defined
  include_tasks: backup-local.yml
  tags:
    - tor-backup
