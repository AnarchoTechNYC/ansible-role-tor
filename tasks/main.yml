---
# Tasks to ensure Tor is installed, running, and current.

- name: Install dirmngr.
  apt:
    update_cache: yes
    state: latest
    name: dirmngr

- name: Install the Tor Project's GPG public key.
  apt_key:
    keyserver: keys.gnupg.net
    validate_certs: yes
    id: A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89
    state: present

- name: Add Tor Project's package repositories.
  apt_repository:
    repo: "{{ item }}"
    state: present
    validate_certs: yes
  loop:
    - "deb http://deb.torproject.org/torproject.org {{ ansible_distribution_release | default('jessie') }} main"
    - "deb-src http://deb.torproject.org/torproject.org {{ ansible_distribution_release | default('jessie') }} main"

- name: Get installed Tor version.
  register: my_tor_version
  shell: "tor --version | cut -d ' ' -f 3"
  changed_when: false

- name: Get repository Tor version.
  register: repo_tor_version
  shell: "apt show tor 2>/dev/null | grep ^Version: | cut -d ' ' -f 2"
  changed_when: false

- name: Build and install updated Tor from source.
  # When my_tor_version.stdout is the empty string, there is no Tor installed.
  when: my_tor_version.stdout == "" or my_tor_version.stdout is version(repo_tor_version.stdout.split('-')[0], '<')
  block:
    - name: Install Tor build dependencies.
      apt:
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - build-essential
          - fakeroot
          - devscripts

    - name: Build Tor dependencies.
      apt:
        name: tor
        state: build-dep

    - name: Create temporary directory for building Tor.
      file:
        path: "{{ tor_package_build_dir }}"
        state: directory

    - name: Build Tor from source.
      shell: "apt source tor; cd tor-*; debuild -rfakeroot -uc -us; cd ..;"
      args:
        chdir: "{{ tor_package_build_dir | quote }}"
        creates: "tor_*.orig.tar.gz"

    - name: Move newly built Tor packages to predictable names.
      shell: |
        mv {{ tor_package_build_dir | quote }}/tor_*.deb {{ tor_package_build_dir | quote }}/tor_justbuilt.deb
        mv {{ tor_package_build_dir | quote }}/tor-geoipdb_*.deb {{ tor_package_build_dir | quote }}/tor-geoipdb_justbuilt.deb
      args:
        chdir: "{{ tor_package_build_dir | quote }}"
        creates: "tor_justbuilt.deb"

    - name: Install newly built Tor packages.
      apt:
        deb: "{{ item }}"
      loop:
        - "{{ tor_package_build_dir }}/tor_justbuilt.deb"
        - "{{ tor_package_build_dir }}/tor-geoipdb_justbuilt.deb"

    - name: Remove temporary directory for building Tor.
      file:
        path: "{{ tor_package_build_dir }}"
        state: absent

- name: Create system Onion services directory.
  file:
    path: "{{ tor_onion_services_dir }}"
    state: directory
    owner: debian-tor

- name: Ensure torrc.d Onion service directories exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: debian-tor
  loop: "{{ folders }}"
  vars:
    folders:
      - /etc/tor/torrc.d/onions-available
      - /etc/tor/torrc.d/onions-enabled

- name: Include the torrc.d/onions-enabled directory in the torrc configuration.
  lineinfile:
    path: /etc/tor/torrc
    state: present
    insertafter: EOF
    regexp: '^%include /etc/tor/torrc\.d/onions-enabled$'
    line: "%include /etc/tor/torrc.d/onions-enabled"
    validate: "tor --verify-config -f %s"
  notify:
    - Reload Tor configuration.

- name: Make Onion service configurations available.
  when: item.state | default('present') == "present"
  template:
    src: onion-service.j2
    dest: "/etc/tor/torrc.d/onions-available/{{ item.name }}"
    owner: debian-tor
    group: debian-tor
    mode: "600"
    # TODO: Fix unprivileged-to-unprivileged user validation. See:
    # http://docs.ansible.com/ansible/latest/become.html#becoming-an-unprivileged-user
    #validate: "tor --verify-config -f %s"
  loop: "{{ onion_services }}"

- name: Remove Onion service configurations.
  when: item.0.state | default('present') == "absent"
  file:
    path: "{{ item.1 }}/{{ item.0.name }}"
    state: absent
  loop: "{{ onion_services | product(paths) | list }}"
  vars:
    paths:
      - /etc/tor/torrc.d/onions-available
      - "{{ tor_data_dir }}/onion-services"

- name: Enable Onions.
  when: item.state | default('present') != "absent"
  file:
    src: "/etc/tor/torrc.d/onions-available/{{ item.name }}"
    path: "/etc/tor/torrc.d/onions-enabled/{{ item.name }}"
    state: "{{ item.enabled | default('link') }}"
  loop: "{{ onion_services }}"
  notify: Reload Tor configuration.

- name: Enable system Tor service.
  service:
    name: tor
    state: started
    enabled: yes

# We do this immediately rather than as a handler in order to ensure
# that we will have generated Onion service keys to backup, next.
- name: Apply Tor configuration.
  service:
    name: tor
    state: reloaded

- name: Fetch backup copies of Onion service keys.
  # Only fetch client_keys if Onion service is present, enabled, and
  # clients are authenticated.
  when: item.0.state | default('present') == "present" and
        item.0.enabled | default('link') != "absent" and
        ( (item.0.auth_type is defined and item.0.auth_type != false) or item.1 == "private_key" )
  fetch:
    dest: "{{ tor_onion_services_backup_dir }}"
    src: "{{ tor_onion_services_dir }}/{{ item.0.name }}/{{ item.1 }}"
  loop: "{{ onion_services | product(files) | list }}"
  vars:
    files:
      - private_key
      - client_keys

- name: Set local filesystem permissions on fetched Onion service keys.
  # Only fetch client_keys if Onion service is present, enabled, and
  # clients are authenticated.
  when: item.0.state | default('present') == "present" and
        item.0.enabled | default('link') != "absent" and
        ( (item.0.auth_type is defined and item.0.auth_type != false) or item.1 == "private_key" )
  become: no
  local_action:
    module: file
    path: "{{ tor_onion_services_backup_dir }}/{{ inventory_hostname }}/{{ tor_onion_services_dir }}/{{ item.0.name }}/{{ item.1 }}"
    mode: "600"
    owner: "{{ lookup('env', 'USER') }}"
  loop: "{{ onion_services | product(files) | list }}"
  vars:
    files:
      - private_key
      - client_keys
