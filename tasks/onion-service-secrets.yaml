---
# These tasks are for handling an Onion service's "secret" files of
# several types. They include:
#
# * v3 Onion's `hs_ed25519_secret_key` file
# * v3 Onion's `hs_ed25519_public_key` file
# * v2 Onion's `private_key` file
# * v2 Onion's `client_keys` file

- name: Check for Tor secrets file.
  register: f
  become: false
  local_action:
    module: stat
    path: "{{ tor_onion_services_backup_dir | quote }}/{{ inventory_hostname | quote }}{{ tor_onion_services_dir | quote }}/{{ item.name | quote }}/{{ secret_file }}"

- name: Handle local Tor secrets.
  when: f.stat.exists
  vars:
    secret_file_path: "{{ tor_onion_services_backup_dir | quote }}/{{ inventory_hostname | quote }}{{ tor_onion_services_dir | quote }}/{{ item.name | quote }}/{{ secret_file }}"
  block:
    - name: Decrypt Onion service secret file.
      when: tor_onion_services_backup_password is defined
      no_log: true
      become: false
      check_mode: false
      local_action:
        module: expect
        command: "ansible-vault decrypt --vault-id {{ tor_onion_services_backup_vault_id | default('') | quote }}@prompt {{ secret_file_path }}"
        responses:
          password: "{{ tor_onion_services_backup_password }}"

    - name: Copy Onion service secret file.
      copy:
        src: "{{ item[secret_file + '_file'] }}"
        dest: "{{ tor_onion_services_dir }}/{{ item.name }}/{{ secret_file }}"
        owner: debian-tor
        group: debian-tor
        mode: "600"

    - name: Re-encrypt Onion service secret file.
      when: tor_onion_services_backup_password is defined
      no_log: true
      become: false
      check_mode: false
      local_action:
        module: expect
        command: "ansible-vault encrypt --vault-id {{ tor_onion_services_backup_vault_id | default('') | quote }}@prompt {{ secret_file_path }}"
        responses:
          password: "{{ tor_onion_services_backup_password }}"
